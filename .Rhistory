wd()
getwd()
swirl()
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
swirl()
head(flags)
dim(flags)
class(flags)
quit()
rep(1:4,4:1)
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$popluation, flags$landmass, summary)
tapply(flags$population, flags$landmass, summary)
50/800
300/800
library(datasets)
data(iris)
?iris
iris
names(iris)
virginica<-iris[,iris$Species=="virginica"]
virginica<-iris[ which(iris$Species=="virginica")]
virginica<-iris[ which(iris$Species=="virginica")]
virginica<-iris[ , which(iris$Species=="virginica")]
virginica<-iris[which(iris$Species=="virginica"),]
mean(virginica$Sepal.length)
mean(virginica$Sepal.length, na.rm=T)
mean(virginica$Sepal.Length, na.rm=T)
apply(iris[,1:4],2,mean)
library(datasets)
data(mtcars)
?mtcars
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(iris$Sepal.Length, iris$Species,mean)
names(mtcars)
hp_cyl<-tapply(mtcars$hp, mtcars$cyl,mean)
hp_cyl
hp_cyl[3]-hp_cyl[1]
debug(ls)
ls()
quit
ad
q
undebug(ls)
library(datasets)
datasets()
data()
?load
load(trees)
#Hosptial_shit
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
#To make a simple histogram of the 30-day death rates from heart attack (column
#11 in the outcome dataset)
outcome[, 11] <- as.numeric(outcome[, 11])
## You may get a warning about NAs being introduced; that is okay
hist(outcome[, 11])
best <- function(state, outcome) {
## Read outcome data
}
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
setwd("~/DataSci/datasciencecoursera/R_programming/ProgrammingAssignment3/rprog-data-ProgAssignment3-data")
#Hosptial_shit
setwd("~/DataSci/datasciencecoursera/R_programming/ProgrammingAssignment3/
rprog-data-ProgAssignment3-data")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
#To make a simple histogram of the 30-day death rates from heart attack (column
#11 in the outcome dataset)
outcome[, 11] <- as.numeric(outcome[, 11])
## You may get a warning about NAs being introduced; that is okay
hist(outcome[, 11])
best <- function(state, outcome) {
## Read outcome data
}
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
#Hosptial_shit
setwd("~/DataSci/datasciencecoursera/R_programming/ProgrammingAssignment3/
rprog-data-ProgAssignment3-data")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
names(outcome)
#To make a simple histogram of the 30-day death rates from heart attack (column
#11 in the outcome dataset)
outcome[, 11] <- as.numeric(outcome[, 11])
## You may get a warning about NAs being introduced; that is okay
hist(outcome[, 11])
best <- function(state, outcome) {
## Read outcome data
}
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
outome[,46]
outcome[,46]
head(outcome[,46])
names(outcome)
fulldata <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
args <- c("heart attack", "heart failure", "pneumonia")
outcome<-"dork"
outcome
if (is.null(args[['outcome']]) stop('invalid outcome')
if (is.null(args[["outcome"]])) stop("invalid outcome")
is.null(args[["heart attack"]])
is.null(args["heart attack"])
if (is.null(args["outcome"])) stop("invalid outcome")
is.null(args["outcome"])
args["outcome"]
args["heart attack"]
args <- c('heart attack', 'heart failure', 'pneumonia')
args
is.element(outcome,args)
!is.element(outcome,args)
heart.attack<-'heart attack'
is.element(heart.attack,args)
!is.element(heart.attack,args)
best <- function(state, outcome) {
## Read outcome data
fulldata <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
args <- c('heart attack', 'heart failure', 'pneumonia')
if (!is.element(outcome,args) stop("invalid outcome")
outcome
}
best <- function(state, outcome) {
## Read outcome data
fulldata <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
args <- c('heart attack', 'heart failure', 'pneumonia')
if (!is.element(outcome,args)) stop("invalid outcome")
outcome
}
best(y,'heart attack')
best(y,'dogs')
fulldata <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
unique(fulldata$State)
best <- function(state, outcome) {
## Read outcome data
fulldata <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
comes <- c('heart attack', 'heart failure', 'pneumonia')
if (!is.element(outcome,comes)) stop("invalid outcome")
places<- unique(fulldata$State)
if (!is.element(state,places)) stop("invalid outcome")
c(outcome, state)
}
best("VA", "heart attack")
best("VA", "heart attac")
best("Vg", "heart attack")
best <- function(state, outcome) {
## Read outcome data
fulldata <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
comes <- c('heart attack', 'heart failure', 'pneumonia')
if (!is.element(outcome,comes)) stop("invalid outcome")
places<- unique(fulldata$State)
if (!is.element(state,places)) stop("invalid state")
c(outcome, state)
}
best("Vg", "heart attack")
best("VA", "heart attac")
best("VA", "heart attack")
View(fulldata)
names<-names(fulldata)
names
cut.data<- c(fulldata$State, fulldata[,11], fulldata[,17],fulldata[,23])
cut.data<- cbind(fulldata$State, fulldata[,11], fulldata[,17],fulldata[,23])
cut.data<- cbind.data.frame(fulldata$State, as.numeric(fulldata[,11]),
as.numeric(fulldata[,17]),as.numeric(fulldata[,23]))
head(cut.data)
names(cut.data)<- c('State', 'heart attack', 'heart failure', 'pneumonia')
head(cut.data)
state.min<- tapply(cut.data, cut.data$State, min)
state.min.attack<- tapply(cut.data$heart attack, cut.data$State, min)
names(cut.data)<- c('State', 'heart_attack', 'heart_failure', 'pneumonia')
state.min.attack<- tapply(cut.data$heart_attack, cut.data$State, min)
state.min.attack
state.min.attack<- tapply(cut.data$heart_attack, cut.data$State, min, na.rm=TRUE)
state.min.attack
state<-'WV'
state.data <- cut.data[state,]
View(state.data)
head(cut.data)
state.data <- cut.data [which(cut.data$State==state,]
state.data <- cut.data [which(cut.data$State==state),]
state.data
state.min.attack<- tapply(cut.data$heart_attack, cut.data$State, min, na.rm=TRUE)
state.min.attack
state.min.attack<- tapply(cut.data$heart attack, cut.data$State, min, na.rm=TRUE)
names(cut.data)<- c('State', 'heart attack', 'heart_failure', 'pneumonia')
state.min.attack<- tapply(cut.data$heart attack, cut.data$State, min, na.rm=TRUE)
state.min.attack<- tapply(cut.data$'heart attack', cut.data$State, min, na.rm=TRUE)
outcome.list<-as.list(c(as.numeric(fulldata[,11]), as.numeric(fulldata[,17]),
as.numeric(fulldata[,23])))
outcome.list<- lapply(fulldata[,id], c)
id<-c(11,17,23)
outcome.list<- lapply(fulldata[,id], c)
group<- rep('heart attack', length(outcome.list[[1]]))
head(group)
names(cut.data)<- c('State', 'heart_attack', 'heart_failure', 'pneumonia')
outcome.data<-cut.data [, 'heart attack']
outcome.data<-cut.data [, 'heart attack']
outcome.data<-cut.data [, `heart attack`]
outcome.data<-cut.data$heart attack`
outcome.data<-cut.data$`heart attack`
outcome.data<-cut.data[,2]
outcome.data<-cut.data[,comes[1]]
comes <- c('heart attack', 'heart failure', 'pneumonia')
outcome.data<-cut.data[,comes[1]]
comes[1]
names(cut.data)<- c('State', 'heart_attack', 'heart_failure', 'pneumonia')
outcome.data<-cut.data$'heart_attack'
names(cut.data)<- c('State', 'heart attack', 'heart_failure', 'pneumonia')
outcome.data<-cut.data$'heart attack'
outcome<-'heart attack'
outcome.data<-cut.data$outcome
cut.data$'heart attack'
outcome.data<-cut.data$'outcome'
names(cut.data)<- c('State', 'heart attack', 'heart failure', 'pneumonia')
comes <- c('heart attack', 'heart failure', 'pneumonia')
state.data <- cut.data [which(cut.data$State==state),]
outcome.data<- cut.data$outcome
outcome<- 'pneumonia'
outcome.data<- cut.data$outcome
state==comes
outcome==comes
names(cut.data)
outcome==names(cut.data)
outcome.data<- cut.data[,outcome==names(cut.data)]
sel.data <- cut.data [which(cut.data$State==state), outcome==names(cut.data)]
names(fulldata)
sel.data <- cut.data [which(cut.data$State==state), outcome==names(cut.data)]
outcome
outcome<-'heart attack'
sel.data <- cut.data [which(cut.data$State==state), outcome==names(cut.data)]
cut.data<-do.call(cbind, fulldata[,id])
View(cut.data)
id<-c(2,11,17,23)
outcome.list<- lapply(fulldata[,id], c)
cut.data<-do.call(cbind, fulldata[,id])
View(cut.data)
id<-c(2,7,11,17,23)
cut.data<-do.call(cbind, fulldata[,id])
View(cut.data)
names(cut.data)<- c('Hospital' 'State','heart attack','heart failure', 'pneumonia')
names(cut.data)<- c('Hospital', 'State','heart attack','heart failure', 'pneumonia')
sel.data <- cut.data [which(cut.data$State==state), outcome==names(cut.data)]
names(cut.data)<- c('Hospital', 'State','heart attack','heart failure', 'pneumonia')
sel.data <- cut.data [which(cut.data$State==state), outcome==names(cut.data)]
cut.data$State
View(cut.data)
names(cut.data)<- c('Hospital', 'State','heart attack','heart failure', 'pneumonia')
cut.data<-as.data.frame(do.call(cbind, fulldata[,id]))
cut.data$State
sel.data <- cut.data [which(cut.data$State==state), outcome==names(cut.data)]
View(sel.data)
outcome
outcome==names(cut.data)
names(cut.data)
names(cut.data)<- c('Hospital', 'State','heart attack','heart failure', 'pneumonia')
names(cut.data)
outcome==names(cut.data)
sel.data <- cut.data [which(cut.data$State==state), outcome==names(cut.data)]
head(sel.data)
view(sel.data)
View(sel.data)
sel.data <- cut.data [(cut.data$State==state), outcome==names(cut.data)]
sel.data <- cut.data [cut.data$State==state, c(1,outcome==names(cut.data)]
sel.data <- cut.data [cut.data$State==state, c(1,outcome==names(cut.data)]
sel.data <- cut.data [cut.data$State==state, c(1,outcome==names(cut.data))]
View(sel.data)
outcome
outcome==names(cut.data)
head(sel.data)
sel.data <- cut.data [cut.data$State==state, c(outcome, 'Hospital') %in% names(cut.data))]
sel.data <- cut.data [cut.data$State==state, c(outcome, 'Hospital') %in% names(cut.data)]
View(sel.data)
outcome
c(outcome, 'Hospital')
c(outcome, 'Hospital') %in% names(cut.data)
c(outcome, 'Hospital')==names(cut.data)
names(cut.data) %in% c(outcome, 'Hospital')
sel.data <- cut.data [cut.data$State==state, names(cut.data) %in% c(outcome, 'Hospital') ]
View(sel.data)
state.min<- sel.data[min(sel.data$`heart attack`)]
state.min<- sel.data[min(as.numeric(sel.data$`heart attack`))]
state.min<- sel.data[min(as.numeric(sel.data$outcome))]
state.min<- sel.data[min(as.numeric(sel.data$outcome)),]
state.min<- sel.data[min(as.numeric(sel.data$outcome), na.rm=T),]
sel.data$outcome
head(sel.data)
outcome
names(sel.data)
head(sel.data$Hospital)
head(sel.data$heart attack)
head(sel.data$"heart attack")
outcome
sel.data$outcome
outcome
as.numeric(sel.data[,2])
sel.data
min(as.numeric(sel.data[,2]), na.rm=T)
sel.data[,2]
min(c(2:45))
min(sel.data[,2], na.rm=TRUE)
min(as.numeric(sel.data[,2]), na.rm=T)
as.numeric(sel.data[,2])
sel.data[,2]
sel.data[,2]<-as.numeric(as.character(sel.data[,2]))
min(sel.data[,2])
min(sel.data[,2], na.rm=T)
state.min<- sel.data[min(sel.data[,2], na.rm=T),]
state.min
state.min[1]
state.min[[1]
]
as.character(state.min[1])
state.min[1]
state.min
as.character(state.min[1,1])
best <- function(state, outcome) {
## Read outcome data
fulldata <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
id<-c(2,7,11,17,23)
outcome.list<- lapply(fulldata[,id], c)
#Cut out the columns we want
cut.data<-as.data.frame(do.call(cbind, fulldata[,id]))
#cut.data<- cbind.data.frame(fulldata$State, as.numeric(fulldata[,11]),
#as.numeric(fulldata[,17]),as.numeric(fulldata[,23]))
##N.B. I need to rbind the outcomes together so there are only three columns,
## 'state', 'outcome', and 'mortality'.
names(cut.data)<- c('Hospital', 'State','heart attack','heart failure', 'pneumonia')
## Check that state and outcome are valid
comes <- c('heart attack', 'heart failure', 'pneumonia')
if (!is.element(outcome,comes)) stop("invalid outcome")
places<- unique(fulldata$State)
if (!is.element(state,places)) stop("invalid state")
## Return hospital name in that state with lowest 30-day death rate
## Pull out the state and outcome you need
sel.data <- cut.data [cut.data$State==state, names(cut.data) %in%
c(outcome, 'Hospital') ]
sel.data[,2]<-as.numeric(as.character(sel.data[,2]))
state.min<- sel.data[min(sel.data[,2], na.rm=T),]
as.character(state.min[1,1])
}
best("OH", "heart attack")
as.character(sel.data[,2])
as.numeric(as.character(sel.data[,2]))
state.min[,1]
state.min<- sel.data[min(sel.data[,2], na.rm=T),]
View(state.min)
state.min<- state.min[order(state.min[,1])]
best <- function(state, outcome) {
## Read outcome data
fulldata <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
id<-c(2,7,11,17,23)
outcome.list<- lapply(fulldata[,id], c)
#Cut out the columns we want
cut.data<-as.data.frame(do.call(cbind, fulldata[,id]))
#cut.data<- cbind.data.frame(fulldata$State, as.numeric(fulldata[,11]),
#as.numeric(fulldata[,17]),as.numeric(fulldata[,23]))
##N.B. I need to rbind the outcomes together so there are only three columns,
## 'state', 'outcome', and 'mortality'.
names(cut.data)<- c('Hospital', 'State','heart attack','heart failure', 'pneumonia')
## Check that state and outcome are valid
comes <- c('heart attack', 'heart failure', 'pneumonia')
if (!is.element(outcome,comes)) stop("invalid outcome")
places<- unique(fulldata$State)
if (!is.element(state,places)) stop("invalid state")
## Return hospital name in that state with lowest 30-day death rate
## Pull out the state and outcome you need
sel.data <- cut.data [cut.data$State==state, names(cut.data) %in%
c(outcome, 'Hospital') ]
sel.data[,2]<-as.numeric(as.character(sel.data[,2]))
state.min<- sel.data[min(sel.data[,2], na.rm=T),]
state.min<- state.min[order(state.min[,1])]
as.character(state.min[1,1])
}
best("VA", "pneumonia")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
best("SC","heart attack")
source(best)
best("SC","heart attack")
best("TX", "heart attack")
getwd()
outcome
state
state<-"TX"
sel.data <- cut.data [cut.data$State==state, names(cut.data) %in%
c(outcome, 'Hospital') ]
sel.data[,2]<-as.numeric(as.character(sel.data[,2]))
state.min<- sel.data[min(sel.data[,2], na.rm=T),]
View(state.min)
sel.data
sel.data<-order(sel.data[,1])
sel.data
sel.data<-sel.data[order(sel.data[,1]),]
sel.data <- cut.data [cut.data$State==state, names(cut.data) %in%
c(outcome, 'Hospital') ]
sel.data[,2]<-as.numeric(as.character(sel.data[,2]))
sel.data<-sel.data[order(sel.data[,1]),]
View(sel.data)
state.min<- sel.data[min(sel.data[,2], na.rm=T),]
state.min
sel.data
sel.data<-sel.data[complete.cases(sel.data),]
sel.data
state.min<- sel.data[min(sel.data[,2]),]
state.min
min(sel.data[,2])
state.min<- sel.data[sel.data[,2]==min(sel.data[,2]),]
state.min
best("TX", "heart failure")
best("TX", "heart failure")
source(best)
source(best.R)
source('~/DataSci/datasciencecoursera/R_programming/ProgrammingAssignment3/rprog-data-ProgAssignment3-data/best.R')
best("TX", "heart failure")
getwd()
best()
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
best("NY", "hert attack")
submit()
2
submit()
submit()
